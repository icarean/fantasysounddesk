<!DOCTYPE html>
<html lang="en-UK">
<meta charset="UTF-8">
<head>

<title>PAFC sound desk</title>

<!-- Serah Allison 2023 -->


<!-- Planned features:
 * Tidy up UI
 * Button to stop sound
 * Play same sound as a round?
 * Load base64 from file ? by PHP
 * Generic buttons / sounds
 * Can auto-generate sound files?
-->


<!-- Prevent zoom in/out on Android -->
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />


<!-- Icon by Wikimedia Commons user Overtheborderline -->
<!-- https://commons.wikimedia.org/wiki/File:3D_heart.png -->
<link rel="icon" href="./favicon.ico" type="image/x-icon" />

<!-- Icon sizes and code from Greg Gant's "The 2020 Guide to FavIcons for Nearly Everyone and Every Browser":
     https://www.emergeinteractive.com/insights/detail/The-Essentials-of-FavIcons/ -->
<!-- generics -->
<link rel="icon" href="icons/hearticon-32.png" sizes="32x32">
<link rel="icon" href="icons/hearticon-57.png" sizes="57x57">
<link rel="icon" href="icons/hearticon-76.png" sizes="76x76">
<link rel="icon" href="icons/hearticon-96.png" sizes="96x96">
<link rel="icon" href="icons/hearticon-128.png" sizes="128x128">
<link rel="icon" href="icons/hearticon-192.png" sizes="192x192">
<link rel="icon" href="icons/hearticon-228.png" sizes="228x228">

<!-- Android -->
<link rel="shortcut icon" sizes="196x196" href=“icons/hearticon-196.png">

<!-- iOS -->
<link rel="apple-touch-icon" href="icons/hearticon-120.png" sizes="120x120">
<link rel="apple-touch-icon" href="icons/hearticon-152.png" sizes="152x152">
<link rel="apple-touch-icon" href="icons/hearticon-180.png" sizes="180x180">

<!-- Windows 8 IE 10-->
<meta name="msapplication-TileColor" content="#FFFFFF">
<meta name="msapplication-TileImage" content="icons/hearticon-144.png">

<!— Windows 8.1 + IE11 and above —>
<meta name="msapplication-config" content="icons/browserconfig.xml" />

</head>
</html>


<style>

:root {
  /* Prevent most zoom in/out on iOS */
  touch-action: pan-x pan-y;
  height: 100%

  /* Prevent the user from selecting text e.g. if they press-hold over text on a button */
  -webkit-touch-callout: none;  /* iOS Safari */
  -webkit-user-select: none;    /* Safari */
  user-select: none;
}
body {
  background-color: grey;
}
p span {
  background-color: whitesmoke;
}
h3 {
  line-height: 0.4em;
}
h2 {
  line-height: 0.4em;
}
h1 {
  line-height: 0.4em;
white-space: nowrap;
}
small {
  font-size: 0.6em;
}
.alertText {
  color: red;
}
button {
  width: 45%;
  height: 3em;
  font-size: 15pt;
  font-weight: normal;
  padding: 0;
  margin-left: 2%;
  margin-right: 2%;
  margin-top: 3px;
  margin-bottom: 3px;
  border: 1px solid lightgray;
  border-radius: 5px;
  background-color: offwhite;
}
img.alertIcon {
  width: auto;
  height: 0.8em;
  padding-right: 0.5em;
}


</style>



<html>
<body>

<!-- Warning texts -->
<p><span><img src="images/256px-Alert_icon-72a7cf.png" class="alertIcon" />Webapps are constrained by browser and OS limitations. If the app doesn't seem to work well, try on a different browser or device.</span></p>
<div id="iOSwarning" style="display:none;"><img src="images/256px-Alert_icon-72a7cf.png" class="alertIcon" />It looks like you're using iOS. iOS is not fully supported. Compression audio alerts are unreliable, and ventilation audio alerts will be disabled.</div>
<div id="chromeWarning" style="display:none;"><img src="images/256px-Alert_icon-72a7cf.png" class="alertIcon" />It looks like you're using Google Chrome or a Chrome-derivative browser. Compression audio alerts are unreliable in Chrome. <b>Please try using a different browser.</b></div>


<!-- Start button -->
<button id="start" onClick="loadSounds(); startSoundDesk();" style="margin:10% auto;display:block;" class="highAlert">Start the sound desk</button>

<!-- Adrenaline time and cycle time -->
<div id="adrenCycleTimers"></div>

<!-- Compression and ventilation metronomes -->
<div id="metronomes" style="position:relative;">
  <div id="compressCircle"></div>
  <div id="compressText" class="metronomeText"></div>
  <div id="ventCircle"></div>
  <div id="ventText" class="metronomeText"></div>
</div>

<!-- Hack to prevent the screen from timing out: play a 2x2 video at the end of the webpage -->
<!-- For Chrome and Chrome derivatives (Samsung Internet) the video must be on screen to keep the screen on, so put it in the middle of the app area the user is most likely to need to remain on -->
<!-- Generated from a short phonecamera video using ffmpeg -i 20210421_163133.mp4 -vf scale=2:2 -strict -2 keepScreenOnVideo.mp4 -->
<!-- <video id="keepScreenOnVideo" src="20210421_163133.mp4" webkit-playsinline playsinline></video> -->
<!-- The height:2px is important for Chrome, which will otherwise enlarge the video -->
<video id="keepScreenOnVideo" src="keepScreenOnVideo.mp4" style="height:2px; float:left; filter:opacity(0%);" webkit-playsinline playsinline></video>


<!-- Audio containers and play-audio buttons -->
<?php

// endswith function thanks to user mcrumley from https://stackoverflow.com/questions/619610/whats-the-most-efficient-test-of-whether-a-php-string-ends-with-another-string
function endswith($string, $test) {
    $strlen = strlen($string);
    $testlen = strlen($test);
    if ($testlen > $strlen) return false;
    return substr_compare($string, $test, $strlen - $testlen, $testlen) === 0;
}

$fileSystemIterator = new FilesystemIterator('sounds');
foreach ($fileSystemIterator as $fileInfo) {
  $thisFilename = $fileInfo->getFilename();
  if (endswith($thisFilename,".mp3")) {
    echo "<audio id='audioContainer_".$thisFilename."'><source src='sounds/".$thisFilename."' type='audio/mpeg'></audio>\n";
    echo "<button onclick='playMp3(&quot;audioContainer_".$thisFilename."&quot;)' type='button'>Play ".substr($thisFilename, 0, -4)."</button>\n";
//&#39;
  }
}

?>

<!-- Footer -->
<div id="footer">
  <br />
  <small>Sound desk webapp.<br />
  Last updated 30/07/2023<br />
</div>

</body>
</html>



<script type="text/javascript">


// This should go somewhere else later but WIP for playing .mp3s
function playMp3(audioContainerID) {
  audioContainer = document.getElementById(audioContainerID);
  audioContainer.play(); 
} 



// Build the JS array of server-side sound file names and base64 audio data
var filenames = <?php echo json_encode($filenames); ?>;
var buttonNames = <?php echo json_encode($buttonNames); ?>;
var base64data = <?php echo json_encode($base64data); ?>;



// Internal variables
usingiOS=detectiOS();
usingChrome=detectChrome();

// Other global IDs and objects
keepScreenOnVideo=document.getElementById("keepScreenOnVideo");

// Default display
document.getElementById('actionButtons').style.display='none';

// If using a touch screen, disable mouse clicks
// This hack allows us to catch touchscreen longpresses properly
if ('ontouchstart' in window) {
  document.getElementById('buttonClack').onclick=null;
  document.getElementById('actAdrenaline').onclick=null;
  document.getElementById('buttonWaah').onclick=null;
}

// Disable doubleclicks to prevent iOS zooming in/out on doubleclicking some elements that previous prevention methods did not catch
document.addEventListener('dblclick', (event) => {
  event.preventDefault()
}, { passive: false });

function loadSounds() {

  // Sound effects originally from https://freesound.org/
  // Base64 created with: base64 filename.mp3 -w 0

  clackSound=new Audio("data:audio/mpeg;base64,".concat(base64data[0]));
  waahSound=new Audio("data:audio/mpeg;base64,".concat(base64data[1]));
}

function playSound(soundName) {
  switch (soundName) {
    case "waahSound":
      waahSound.play();
      break;

    case 'clackSound':
      clackSound.play();
      break;

  }
}

function startSoundDesk() {
  keepScreenOn();
  // Hide the start button
  document.getElementById('start').style.display='none';

  // Set up display
  width=window.innerWidth;
  height=window.innerHeight;

  // Scale text for screen resolution (app was developed on a screen with height 560px)
  document.body.style.fontSize=16*height/560+"px";

  // Display the buttons, scaled for height of screen
  document.getElementById('actionButtons').style.display='block';
  changeStyle('button',0.08*560+"px");  // Each button is 8% of height, designed on 560px height screen

}

function videoLoopFunction() {
  keepScreenOnVideo.currentTime=0;
  keepScreenOnVideo.play();
}

// Video play hack to keep screen on
function keepScreenOn() {
  if (typeof keepScreenOnVideo.loop == 'boolean') {
    keepScreenOnVideo.loop=true;
  } else {
    keepScreenOnVideo.addEventListener('ended',videoLoopFunction(),false);
  }
  setTimeout(() => { keepScreenOnVideo.play(); keepScreenOnVideo.muted=true; },1000)  // Play after a short delay, otherwise it won't play at all
}

function allowScreenToTurnOff() {
  if (typeof keepScreenOnVideo.loop=='boolean') {
    keepScreenOnVideo.loop=false;
  } else {
    keepScreenOnVideo.removeEventListener('ended',videoLoopFunction,false);
  }
  keepScreenOnVideo.pause();
  keepScreenOnVideo.currentTime=0;
}

function detectiOS() {
  return [
    'iPad Simulator',
    'iPhone Simulator',
    'iPod Simulator',
    'iPad',
    'iPhone',
    'iPod'
  ].includes(navigator.platform)
  // iPad on iOS 13 detection
  || (navigator.userAgent.includes("Mac") && "ontouchend" in document)
}

// From user Jonathan Marzullo at https://stackoverflow.com/questions/4565112/javascript-how-to-find-out-if-the-user-browser-is-chrome
function detectChrome() {
// please note, 
// that IE11 now returns undefined again for window.chrome
// and new Opera 30 outputs true for window.chrome
// but needs to check if window.opr is not undefined
// and new IE Edge outputs to true now for window.chrome
// and if not iOS Chrome check
// so use the below updated condition
var isChromium = window.chrome;
var winNav = window.navigator;
var vendorName = winNav.vendor;
var isOpera = typeof window.opr !== "undefined";
var isIEedge = winNav.userAgent.indexOf("Edge") > -1;
var isIOSChrome = winNav.userAgent.match("CriOS");

if (isIOSChrome) {
   // is Google Chrome on IOS
  return true;
} else if(
  isChromium !== null &&
  typeof isChromium !== "undefined" &&
  vendorName === "Google Inc." &&
  isOpera === false &&
  isIEedge === false
) {
   // is Google Chrome
  return true;
} else { 
   // not Google Chrome 
  return false;
}
}

function touchButton(buttonId) {
  document.getElementById(buttonId).focus();  // 'Highlight' button
}

function untouchButton(buttonId) {
  setTimeout(() => { window.focus(); }, 10);
  setTimeout(() => { document.getElementById(buttonId).blur(); }, 20);
}


</script>

